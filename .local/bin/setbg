#!/bin/sh

# Simple wrapper for
# hsetroot that supports
# pywal, and dwmc xrgb.

# Syntax:
# setbg (-w|-h|-p|-N)
# ----------------------------
# -w [path/to/wallpaper]
# specifies a wallpaper other
# then the default defind in
# this script.
# ----------------------------
# -h (-center|-fill|-tile|etc...)
# specifies what hsetroot
# settings to use.
# ----------------------------
# -m (-tint|-sharpen|-flip[vhd]|etc...)
# specifies the manipulations to use
# on the image. MUST BE IN QUOTES!
# ----------------------------
# -p means use pywal.
# ----------------------------
# -N means don't send a notification
# ----------------------------
# Optional functionality to refresh
# dwm with dwmc and the xrdb patch
# automatically.

# Error codes.
feherror() { echo "Syntax Error...Exiting..."; exit; }
pywalerror() { echo "Unsupported file format or farbfeld compression algorithm...Exiting..."; exit; }

# Parser
while getopts "w:h:m:pN" parm; do case $parm in
	w) wallpaper="$OPTARG" ;;
	h) hsetting="$OPTARG" ;;
	m) manipulate="$OPTARG" ;;
	p) pywal="y" ;;
	N) notification="n" ;;
	*) printf "Invalid option: -%s\\n" && exit ;;
esac done

# Defaults.
[ -z "$wallpaper" ] && wallpaper="$HOME/.local/wg/nature/oregon-coast.jpg"
[ -z "$hsetting" ] && hsetting="-cover"
[ -z "$pywal" ] && pywal="n"
[ -z "$notification" ] && notification="y"

# Set the background
hsetroot ${manipulate} $hsetting $wallpaper || feherror
[ "$notification" = "y" ] && notify-send -i $wallpaper "Wallpaper Set"

# Use pywal if specified and convert
# from farbfeld to temp jpg if necessary.
[ "$pywal" = "y" ] && {
	[ -z $(echo "$wallpaper" | grep -o *.ff) ] || ff2jpg < $wallpaper > /tmp/wallpaper.jpg && wallpaper="/tmp/wallpaper.jpg"
	wal -i "$wallpaper" >/dev/null 2>&1
	rm /tmp/wallpaper.jpg >/dev/null 2>&1
}

# Refresh dwm to use new colors with
# dwmc and rxdb.
ifinstalled dwmc >/dev/null 2>&1 && dwmc xrdb >/dev/null 2>&1
