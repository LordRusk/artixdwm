#!/usr/bin/env sh

# Simple set of logical
# operations that help
# handling the selections.

# If $1 is empty, send and
# notification and exit
[ -z "$1" ] && notify-send "Unable to pipe selection!" "No script was specified!" && exit

# If both 'clipboard' and 'primary' and empty,
# send a notification and exit.
[ -z "$(xclip -o -selection clipboard)" ] && [ -z "$(xclip -o -selection primary)" ] && notify-send "Unable to grab selection!" "'clipboard' and 'primary' are both empty" && exit

# If either 'clipboard' or 'primary' is empty, pipe
# un-empty selection straight to $1 then exit.
[ -z "$(xclip -o -selection clipboard)" ] && $1 "$(xclip -o -selection primary)" && exit
[ -z "$(xclip -o -selection primary)" ] && $1 "$(xclip -o -selection clipboard)" && exit

# If both 'clipboard' and 'primary' contain
# the same thing, pipe it straight into $1 then exit.
[ "$(xclip -o -selection clipboard)" = "$(xclip -o -selection primary)" ] && $1 "$(xclip -o -selection primary)" && exit

# Give user a dmenu menu of current selections while
# also giving a better view using showclip.
showclip &
selection="$(printf "Clipboard: $(xclip -o -selection clipbard)\nPrimary: $(xclip -o -selection primary)" | dmenu -l 2 -p "Which selection would you like to pipe?")"
[ "$(echo $selection | cut -d' ' -f 1)" = "Clipboard:" ] && selection="$(xclip -o -selection clipboard)" || selection="$(xclip -o -selection primary)"
[ -z "$selection" ] && printf "Error...\\nNo selection selected, Exiting..." && exit

# Pipe the selection into the specified script.
$1 "$selection"
